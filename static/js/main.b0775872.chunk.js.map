{"version":3,"sources":["components/Weather.js","components/WeatherQuery.js","App.js","serviceWorker.js","index.js"],"names":["Weather","className","this","props","city","country","temp","humidity","description","wind","error","Component","WeatherQuery","onSubmit","goGetWeather","label","name","type","onClick","clearFields","API_KEY","App","state","undefined","weatherIcon","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","sys","main","weather","speed","alert","href","alt","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wVAsBeA,G,6LAlBX,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,SACb,4BAAK,GACFC,KAAKC,MAAMC,KACXF,KAAKC,MAAME,QAAS,KAHzB,QAKO,2BAAIH,KAAKC,MAAMG,MALtB,YAMW,2BAAIJ,KAAKC,MAAMI,UAN1B,eAOc,+BAAKL,KAAKC,MAAMK,aAP9B,QAQO,+BAAKN,KAAKC,MAAMM,MACrB,2BAAIP,KAAKC,MAAMO,MAAf,W,GAbYC,c,QCEDC,E,+KACZT,GACL,OACE,yBAAKF,UAAU,aACb,yCACA,0BAAMY,SAAUX,KAAKC,MAAMW,cACzB,kBAAC,IAAD,CACEC,MAAM,OACNd,UAAU,aACVe,KAAK,OACLC,KAAK,SAGP,kBAAC,IAAD,CACEF,MAAM,UACNd,UAAU,gBACVe,KAAK,UACLC,KAAK,SAEP,6BACA,6BACA,4BAAQC,QAAShB,KAAKC,MAAMgB,YAAalB,UAAU,eAAnD,qB,GArBgCU,aCIpCS,EAAU,mCAiEDC,E,2MA/DbC,MAAQ,CACNlB,UAAMmB,EACNlB,aAASkB,EACTjB,UAAMiB,EACNf,iBAAae,EACbb,WAAOa,EACPd,UAAMc,G,EAGRC,YAAc,a,EAEdV,a,uCAAe,WAAMW,GAAN,qBAAAC,EAAA,6DACbD,EAAEE,iBACIvB,EAAOqB,EAAEG,OAAOC,SAASzB,KAAK0B,MAC9BzB,EAAUoB,EAAEG,OAAOC,SAASxB,QAAQyB,MAH7B,SAIUC,MAAM,qDAAD,OAC2B3B,EAD3B,YACmCC,EADnC,kBACoDe,EADpD,oBAJf,cAIPY,EAJO,gBAOMA,EAASC,OAPf,OAOPC,EAPO,OAQbC,QAAQC,IAAIF,GAER9B,GAAQC,EACV,EAAKgC,SAAS,CACZjC,KAAM8B,EAAKlB,KACXX,QAAS6B,EAAKI,IAAIjC,QAClBC,KAAM4B,EAAKK,KAAKjC,KAChBE,YAAa0B,EAAKM,QAAQ,GAAGhC,YAC7BD,SAAU2B,EAAKK,KAAKhC,SACpBE,KAAMyB,EAAKzB,KAAKgC,QAGlBC,MAAM,yBApBK,4C,4HAwBRvC,GACL,OACE,yBAAKF,UAAU,MACb,kBAAC,EAAD,CACEa,aAAcZ,KAAKY,aACnBK,YAAajB,KAAKiB,cAEpB,6BACA,6BACA,2BACE,uBAAGwB,KAAK,0CAA0CC,IAAI,IACpD,uBAAGC,MAAM,oBAIb,kBAAC,EAAD,CACEzC,KAAMF,KAAKoB,MAAMlB,KACjBC,QAASH,KAAKoB,MAAMjB,QACpBC,KAAMJ,KAAKoB,MAAMhB,KACjBE,YAAaN,KAAKoB,MAAMd,YACxBD,SAAUL,KAAKoB,MAAMf,SACrBG,MAAOR,KAAKoB,MAAMZ,MAClBD,KAAMP,KAAKoB,MAAMb,Y,GA1DTE,aCGEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACLyB,QAAQzB,MAAMA,EAAMoD,c","file":"static/js/main.b0775872.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport \"./Weather.css\"\nclass Weather extends Component {\n  render() {\n    return (\n      <div className=\"card\">\n        <div className=\"front\">\n          <h2>{\"\"}\n            {this.props.city}\n            {this.props.country}{\" \"}\n          </h2>\n          Temp <p>{this.props.temp}</p>\n          Humidity <p>{this.props.humidity}</p>\n          Description <p> {this.props.description}</p>\n          Wind <p> {this.props.wind}</p>\n          <p>{this.props.error} </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Weather\n","/* eslint-disable no-undef */\nimport React, { Component } from \"react\"\nimport { MDBInput } from \"mdbreact\"\n\nexport default class WeatherQuery extends Component {\n  render(props) {\n    return (\n      <div className=\"container\">\n        <h1> weather </h1>\n        <form onSubmit={this.props.goGetWeather}>\n          <MDBInput\n            label=\"City\"\n            className=\"city-input\"\n            name=\"city\"\n            type=\"text\"\n          />\n\n          <MDBInput\n            label=\"Country\"\n            className=\"country-input\"\n            name=\"country\"\n            type=\"text\"\n          />\n          <br />\n          <br />\n          <button onClick={this.props.clearFields} className=\"btn btn-mdb\">\n            Get Weather\n          </button>\n        </form>\n      </div>\n    )\n  }\n}\n","/* eslint-disable no-undef */\n/* eslint-disable no-unused-vars */\nimport React, { Component } from \"react\"\nimport \"./App.css\"\nimport Weather from \"./components/Weather\"\nimport WeatherQuery from \"./components/WeatherQuery\"\nimport \"./index.css\"\n\nconst API_KEY = \"8004ed6a9e53c30dd054d079fff7f24e\"\nclass App extends Component {\n  state = {\n    city: undefined,\n    country: undefined,\n    temp: undefined,\n    description: undefined,\n    error: undefined,\n    wind: undefined\n  }\n\n  weatherIcon = () => {}\n\n  goGetWeather = async e => {\n    e.preventDefault()\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`\n    )\n    const data = await api_call.json()\n    console.log(data)\n\n    if (city && country) {\n      this.setState({\n        city: data.name,\n        country: data.sys.country,\n        temp: data.main.temp,\n        description: data.weather[0].description,\n        humidity: data.main.humidity,\n        wind: data.wind.speed\n      })\n    } else {\n      alert(\"Enter Correct Values.\")\n    }\n  }\n \n  render(props) {\n    return (\n      <div className=\"bg\">\n        <WeatherQuery\n          goGetWeather={this.goGetWeather}\n          clearFields={this.clearFields}\n        />\n        <br />\n        <br />\n        <p>\n          <a href=\"https://github.com/deScamuS/weather_app\" alt=\"\">\n            <i class=\"fab fa-github\"></i>\n          </a>\n        </p>\n\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp={this.state.temp}\n          description={this.state.description}\n          humidity={this.state.humidity}\n          error={this.state.error}\n          wind={this.state.wind}\n        />\n      </div>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"@fortawesome/fontawesome-free/css/all.min.css\"\nimport \"bootstrap-css-only/css/bootstrap.min.css\"\nimport \"mdbreact/dist/css/mdb.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}